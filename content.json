[{"title":"移动端饿了么首页轮播图数据请求","date":"2018-01-26T00:01:05.000Z","path":"2018/01/26/移动端饿了么首页轮播图数据请求/","text":"折腾了一个下午，终于实现了数据请求，使用的是express框架和axios 数据请求效果图：具体的实现过程如下：1.在谷歌浏览器下打开饿了么，调成手机模式，Network –&gt; XHR，查看具体的请求2.由上一步可知，请求的地址为：’https://h5.ele.me/restapi/shopping/openapi/entries‘具体的请求参数每个地区是不一样的，可在Query String Parammeters中查看（1）dev-server.js中添加：dev-server.js12345678910111213141516const axios = require(&apos;axios&apos;)var apiRoutes = express.Router()apiRoutes.get(&apos;/endata&apos;, function (req, res) &#123; var url =&apos;https://h5.ele.me/restapi/shopping/openapi/entries?latitude=23.6567&amp;longitude=116.622963&amp;templates[]=main_template&amp;templates[]=favourable_template&amp;templates[]=svip_template&apos; axios.get(url, &#123; headers: &#123; referer: &apos;https://h5.ele.me/&apos;, host: &apos;h5.ele.me&apos; &#125; &#125;).then((response) =&gt; &#123; res.json(response.data) &#125;).catch((e) =&gt; &#123; console.log(e) &#125;) &#125;)app.use(&apos;/api&apos;, apiRoutes)(2)vue中添加请求方法实现数据请求，使用es6的数组解构获取数据1234567891011121314created () &#123; this.entriesData()&#125;,methods: &#123; entriesData() &#123; axios.get(&apos;/api/endata&apos;).then((res) =&gt; &#123; if(res !== false)&#123; [this.entrie] = res.data this.entries = this.entrie console.log(this.entries) &#125; &#125;) &#125;&#125;,(3)entries就是请求下来的轮播图数据","tags":[{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"}]},{"title":"vue项目使用express发送数据","date":"2018-01-22T16:44:39.000Z","path":"2018/01/23/vue项目使用express发送数据/","text":"之前使用vue-cli生成的项目中，是有express依赖的，后来的没有了，那怎样用express发送数据呢？研究了一下，实现的过程并不难 实现的过程如下：1.在生成的vue项目下，新建server文件夹，在server文件夹下，执行命令：123$ npm init$ cnpm install$ cnpm install express --save 2.在vue项目的根目录中放入需要的数据文件，我使用的datas.json文件3.在server文件夹下新建server.js文件：server.js123456789101112131415161718192021222324252627var appData = require(&apos;../datas.json&apos;)var list1 = appData.list1;var list2 = appData.list2;const express = require(&apos;express&apos;)const app = express()const apiRoutes = express.Router();apiRoutes.get(&apos;/list1&apos;,function(req,res)&#123; res.json(&#123; code:0, data:list1 &#125;);&#125;);apiRoutes.get(&apos;/list2&apos;,function(req,res)&#123; res.json(&#123; code:0, data:list2 &#125;);&#125;);app.use(&apos;/api&apos;,apiRoutes);app.listen(3000,function()&#123; console.log(&apos;server start&apos;);&#125;);4.在config文件夹下的index.js中设置代理：index.js12345678proxyTable: &#123; &apos;/api/list1&apos;:&#123; target:&apos;http://localhost:3000&apos; &#125;, &apos;/api/list2&apos;:&#123; target:&apos;http://localhost:3000&apos; &#125; &#125;,5.在server文件夹下执行：1node server.js完成前面的步骤，在vue项目中就可以使用axios请求数据了，如下：12345678910methods: &#123; getList1()&#123; axios.get(&apos;/api/list1&apos;).then((res) =&gt; &#123; if(res.data.code === 0)&#123; this.list1 = res.data.data console.log(this.list1) &#125; &#125;) &#125;&#125;","tags":[{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"}]},{"title":"三栏布局的几种实现方式","date":"2018-01-22T15:41:02.000Z","path":"2018/01/22/三栏布局的几种实现方式/","text":"在高度已经知道的情况下，实现三栏布局，左栏、右栏的宽度为350px,中间部分自适应实现的效果图如下： 浮动的方式123456789101112131415161718192021222324252627/*css部分*/&#123; margin: 0; padding: 0;&#125;.left-center-right div&#123; min-height: 100px;&#125;.left-center-right .left&#123; float: left; width: 350px; background-color: red;&#125;.left-center-right .center&#123; background-color: green;&#125;.left-center-right .right&#123; background-color: blue; float: right; width: 350px;&#125;&lt;!-- 注意，此处的排列为left right center --&gt;&lt;div class=\"left-center-right\"&gt; &lt;div class=\"left\"&gt;左边部分&lt;/div&gt; &lt;div class=\"right\"&gt;右边部分&lt;/div&gt; &lt;div class=\"center\"&gt;中间部分&lt;/div&gt;&lt;/div&gt; 优点：兼容性好缺点：浮动的元素脱离标准流，需要清除浮动，处理不好就尴尬了 定位的方式123456789101112131415161718192021222324.left-center-right div&#123; min-height: 100px; position: absolute;&#125;.left-center-right .left&#123; left:0; width: 350px; background-color: red;&#125;.left-center-right .center&#123; left: 350px; right: 350px; background-color: green;&#125;.left-center-right .right&#123; right:0; background-color: blue; width: 350px;&#125;&lt;div class=\"left-center-right\"&gt; &lt;div class=\"left\"&gt;左边部分&lt;/div&gt; &lt;div class=\"right\"&gt;右边部分&lt;/div&gt; &lt;div class=\"center\"&gt;中间部分&lt;/div&gt;&lt;/div&gt; 优点：快速实现布局缺点：绝对定位的元素脱离标准流，子元素也需要脱离标准流，使用性比较差 flex布局的方式.left-right-center{ display: flex; } .left-right-center div{ min-height: 100px; } .left-right-center .left{ width: 300px; background-color: red; } .left-right-center .center{ flex:1; right: 300px; background-color: green; } .left-right-center .right{ width: 300px; background-color: blue; } 优点：css3的布局方式，可以简单的实现各种页面的响应式布局，特别是在移动端缺点： 表格布局的方式.left-right-center{ width:100%; display: table; height: 100px; } .left-right-center div{ display: table-cell; } .left{ width: 350px; background-color: red; } .center{ right: 350px; background-color: green; } .right{ background-color: blue; width: 300px; } 优点：实现简单，兼容性好缺点：一个高度变化的时候其他的也会撑高","tags":[{"name":"html/css","slug":"html-css","permalink":"http://yoursite.com/tags/html-css/"}]}]